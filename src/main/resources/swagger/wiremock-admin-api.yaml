openapi: 3.0.0

info:
  title: WireMock
  version: 2.19.0

externalDocs:
  description: WireMock user documentation
  url: http://wiremock.org/docs/

servers:
  - url: /

tags:
  - name: Mappings
    description: Operations on stub mappings
    externalDocs:
      description: User documentation
      url: http://wiremock.org/docs/stubbing/
  - name: Request Journal
    description: Operations on the request journal
    externalDocs:
      description: User documentation
      url: http://wiremock.org/docs/verifying/
  - name: Near Misses
    description: Find inexact matches
    externalDocs:
      description: User documentation
      url: http://wiremock.org/docs/verifying/#near-misses
  - name: Recordings
    description: Record and playback
    externalDocs:
      description: User documentation
      url: http://wiremock.org/docs/record-playback/
  - name: Scenarios
    description: Simulate stateful behavior
    externalDocs:
      description: User documentation
      url: http://wiremock.org/docs/stateful-behaviour/
  - name: System
    description: Global operations

paths:
  /__admin/mappings:
    get:
      summary: Get all stub mappings
      tags:
         - Mappings
      parameters:
        - description: The maximum number of results to return
          in: query
          name: limit
          required: false
          example: 10
          schema:
            type: integer
        - description: The start index of the results to return
          in: query
          name: offset
          required: false
          example: 25
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: 'schemas/stub-mappings.yaml'
              examples:
                stubMappings:
                  $ref: 'examples/stub-mappings.yaml'
          description: All stub mappings
    post:
      summary: Create a new stub mapping
      tags:
         - Mappings
      requestBody:
        $ref: "#/components/requestBodies/stubMapping"
      responses:
        '201':
          $ref: "#/components/responses/stubMapping"
    delete:
      summary: Delete all stub mappings
      tags:
         - Mappings
      responses:
        '200':
          description: Successfully deleted

  /__admin/mappings/reset:
    post:
      summary: Reset stub mappings
      description: Restores stub mappings to the defaults defined back in the backing store
      tags:
         - Mappings
      responses:
        '200':
          description: Successfully reset

  /__admin/mappings/save:
    post:
      summary: Persist stub mappings
      description: Save all persistent stub mappings to the backing store
      tags:
         - Mappings
      responses:
        '200':
          description: Successfully saved

  /__admin/mappings/{stubMappingId}:
    parameters:
      - description: The UUID of stub mapping
        in: path
        name: stubMappingId
        required: true
        example: 730d3e32-d098-4169-a20c-554c3bedce58
        schema:
          type: string
    get:
      summary: Get stub mapping by ID
      tags:
         - Mappings
      responses:
        '200':
          $ref: "#/components/responses/stubMapping"
    put:
      summary: Update a stub mapping
      tags:
         - Mappings
      requestBody:
        $ref: "#/components/requestBodies/stubMapping"
      responses:
        '200':
          $ref: "#/components/responses/stubMapping"
    delete:
      summary: Delete a stub mapping
      tags:
         - Mappings
      responses:
        '200':
          description: OK

  /__admin/mappings/find-by-metadata:
    post:
      description: Find stubs by matching on their metadata
      tags:
        - Mappings
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'schemas/content-pattern.yaml'
            examples:
              byMetadataRequest:
                $ref: 'examples/by-metadata-request.yaml'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: 'schemas/stub-mappings.yaml'
              examples:
                stubMappingWithId:
                  $ref: 'examples/stub-mappings.yaml'
          description: Matched stub mappings

  /__admin/mappings/remove-by-metadata:
    post:
      summary: Delete stub mappings matching metadata
      tags:
        - Mappings
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'schemas/content-pattern.yaml'
            examples:
              byMetadataRequest:
                $ref: 'examples/by-metadata-request.yaml'
      responses:
        '200':
          description: 'The stub mappings were successfully removed'

  /__admin/requests:
    get:
      summary: Get all requests in journal
      tags:
         - Request Journal
      parameters:
        - description: The maximum number of results to return
          in: query
          name: limit
          example: 10
          schema:
            type: string
        - description: Only return logged requests after this date
          in: query
          name: since
          example: 2016-10-05T12:33:01Z
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                serveEvents:
                  $ref: 'examples/serve-events.yaml'
          description: List of received requests
    delete:
      summary: Delete all requests in journal
      tags:
         - Request Journal
      responses:
        '200':
          description: Successfully deleted

  /__admin/requests/{requestId}:
    get:
      summary: Get request by ID
      tags:
         - Request Journal
      parameters:
        - description: The UUID of the logged request
          in: path
          name: requestId
          required: true
          example: 12fb14bb-600e-4bfa-bd8d-be7f12562c99
          schema:
            type: string
      responses:
        '200':
          # TODO: examples/request.example.json
          description: OK

  /__admin/requests/reset:
    post:
      summary: Empty the request journal
      tags:
         - Request Journal
      responses:
        '200':
          description: Successfully reset

  /__admin/requests/count:
    post:
      summary: Count requests by criteria
      description: Count requests logged in the journal matching the specified criteria
      tags:
         - Request Journal
      requestBody:
        $ref: "#/components/requestBodies/requestPattern"
      responses:
        '200':
          # TODO:  !include examples/request-count.example.json
          description: Number of matching requests

  /__admin/requests/find:
    post:
      summary: Find requests by criteria
      description: Retrieve details of requests logged in the journal matching the specified criteria
      tags:
         - Request Journal
      requestBody:
        $ref: "#/components/requestBodies/requestPattern"
      responses:
        '200':
          # TODO !include examples/requests.example.json
          description: Matching request details

  /__admin/requests/unmatched:
    get:
      summary: Find unmatched requests
      description: Get details of logged requests that weren't matched by any stub mapping
      tags:
         - Request Journal
      responses:
        '200':
          # TODO !include examples/requests.example.json
          description: Unmatched request details

  /__admin/requests/unmatched/near-misses:
    get:
      description: Retrieve near-misses for all unmatched requests
      tags:
         - Near Misses
      responses:
        '200':
          #TODO !include examples/near-misses.example.json
          description: Top 3 (at most) near misses for each unmatched request

  /__admin/near-misses/request:
    post:
      summary: Find near misses matching specific request
      description: Find at most 3 near misses for closest stub mappings to the specified request
      tags:
         - Near Misses
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'schemas/logged-request.yaml'
            examples:
              loggedRequest:
                $ref: 'examples/logged-request.yaml'
        required: true
      responses:
        '200':
          $ref: "#/components/responses/nearMisses"

  /__admin/near-misses/request-pattern:
    post:
      summary: Find near misses matching request pattern
      description: Find at most 3 near misses for closest logged requests to the specified request pattern
      tags:
         - Near Misses
      requestBody:
        $ref: "#/components/requestBodies/requestPattern"
      responses:
        '200':
          $ref: "#/components/responses/nearMisses"

  /__admin/recordings/start:
    post:
      summary: Start recording
      description: Begin recording stub mappings
      tags:
         - Recordings
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: 'schemas/record-spec.yaml'
                - properties:
                    filters:
                      allOf:
                        - $ref: 'schemas/request-pattern.yaml'
                        - description: Filter requests for which to create stub mapping
                    targetBaseUrl:
                      type: string
                      description: Target URL when using the record and playback API
                      example: http://example.mocklab.io
        required: true
        # TODO !include examples/record-spec.example.json
      responses:
        '200':
          description: Successfully started recording

  /__admin/recordings/stop:
    post:
      summary: Stop recording
      description: End recording of stub mappings
      tags:
         - Recordings
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: 'schemas/stub-mappings.yaml'
              examples:
                stubMappings:
                  $ref: 'examples/recorded-stub-mappings.yaml'
          description: Successfully started recording

  /__admin/recordings/status:
    get:
      summary: Get recording status
      tags:
         - Recordings
      responses:
        '200':
          description: Successfully got the record status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - NeverStarted
                      - Recording
                      - Stopped
              example:
                status: "Stopped"

  /__admin/recordings/snapshot:
    post:
      summary: Take a snapshot recording
      tags:
         - Recordings
      requestBody:
        # TODO !include examples/snapshot-spec.example.json
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: "schemas/record-spec.yaml"
                - properties:
                    filters:
                      type: object
                      allOf:
                        - properties:
                            ids:
                              items:
                                type: string
                              type: array
                          type: object
                          description: Filter requests for which to create stub mapping
                        - $ref: 'schemas/request-pattern.yaml'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: 'schemas/stub-mappings.yaml'
              examples:
                stubMappings:
                  $ref: 'examples/stub-mappings.yaml'
          description: Successfully took a snapshot recording
          # TODO !include examples/recorded-stub-mappings.example.json

  /__admin/scenarios:
    get:
      summary: Get all scenarios
      tags:
         - Scenarios
      responses:
        '200':
          # TODO !include examples/scenarios.example.json
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenarios:
                    type: array
                    items:
                      $ref: "schemas/scenario.yaml"
          description: All scenarios

  /__admin/scenarios/reset:
    post:
      summary: Reset the state of all scenarios
      tags:
         - Scenarios
      responses:
        '200':
          description: Successfully reset

  /__admin/settings:
    post:
      summary: Update global settings
      tags:
         - System
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "schemas/delay-distribution.yaml"
                - type: object
                  properties:
                    fixedDelay:
                      type: number
                  example:
                    fixedDelay: 500
        required: true
      responses:
        '200':
          description: Settings successfully updated

  /__admin/reset:
    post:
      summary: Reset mappings and request journal
      description: Reset mappings to the default state and reset the request journal
      tags:
         - System
      responses:
        '200':
          description: Successfully reset

  /__admin/shutdown:
    post:
      description: Shutdown the WireMock server
      tags:
         - System
      responses:
        '200':
          description: Server will be shut down

components:
  requestBodies:
    requestPattern:
      content:
        application/json:
          schema:
            $ref: 'schemas/request-pattern.yaml'
      required: true

    stubMapping:
      content:
        application/json:
          schema:
            $ref: 'schemas/stub-mapping.yaml'
          examples:
            stubMappingNoId:
              $ref: "examples/stub-mapping-no-id.yaml"
  responses:
    stubMapping:
      description: Created stub mapping
      content:
        application/json:
          schema:
            $ref: 'schemas/stub-mapping.yaml'
          examples:
            stubMappingWithId:
              $ref: "examples/stub-mapping-with-id.yaml"

    nearMisses:
      description: Near misses matching criteria
      content:
        application/json:
          schema:
            type: object
            properties:
              nearMisses:
                type: array
                items:
                  $ref: "schemas/logged-request.yaml"
          examples:
            nearMisses:
              $ref: 'examples/near-misses.yaml'
